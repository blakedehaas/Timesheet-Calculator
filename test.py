#!/usr/bin/env python3
import unittest
import json
import os
from subprocess import run, CalledProcessError
from TimesheetCalculator import Configuration, DistributionCalculator, TimesheetGenerator, TimesheetApp

class TestTimesheetSplitting(unittest.TestCase):
    def setUp(self):
        # Use the existing config.json generated by config.py.
        # Ensure config.json exists by regenerating it.
        try:
            run(["python", "config.py"], check=True)
        except CalledProcessError as e:
            self.fail(f"config.py failed with error: {e}")
        self.config_path = "config.json"
        # Load configuration for use in tests.
        with open(self.config_path, "r") as f:
            self.config_data = json.load(f)

    def test_total_minutes_allocation(self):
        # Verify that the total allocated minutes equal the expected sum.
        app = TimesheetApp(self.config_path)
        expected_ops = self.config_data["projects"]["Operations Software"]["total_hours"] * 60
        expected_space = self.config_data["projects"]["Space Physics"]["total_hours"] * 60
        expected_total = expected_ops + expected_space
        actual_total = sum(
            sum(task[1] for task in tasks) for tasks in app.project_tasks.values()
        )
        self.assertAlmostEqual(actual_total, expected_total, delta=1)

    def test_full_schedule_completion(self):
        # Verify that after running the scheduler, all tasks have been fully scheduled.
        app = TimesheetApp(self.config_path)
        app.run()
        for project, tasks in app.project_tasks.items():
            self.assertEqual(tasks, [], f"Tasks remain unscheduled for project '{project}'.")

class TestConfigRegeneration(unittest.TestCase):
    def test_regenerate_config(self):
        # Regenerate config.json in the current directory.
        try:
            run(["python", "config.py"], check=True)
        except CalledProcessError as e:
            self.fail(f"config.py failed with error: {e}")
        self.assertTrue(os.path.exists("config.json"))
        with open("config.json", "r") as f:
            data = json.load(f)
        required_keys = ["projects", "work_schedule", "weeks", "workday_start_time",
                         "lunch_start_time", "lunch_end_time", "workday_end_time", "paid_time_off"]
        for key in required_keys:
            self.assertIn(key, data)

if __name__ == "__main__":
    unittest.main()
